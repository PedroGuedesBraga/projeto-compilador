
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package compiladores.analisadorLexico;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\012\000\002\003" +
    "\004\000\002\003\004\000\002\003\007\000\002\003\004" +
    "\000\002\003\002\000\002\035\004\000\002\035\002\000" +
    "\002\016\004\000\002\016\004\000\002\010\004\000\002" +
    "\011\007\000\002\012\003\000\002\012\003\000\002\014" +
    "\006\000\002\014\004\000\002\015\002\000\002\020\005" +
    "\000\002\020\005\000\002\021\003\000\002\021\002\000" +
    "\002\005\007\000\002\006\005\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\007\005\000\002\007" +
    "\003\000\002\024\007\000\002\026\003\000\002\026\003" +
    "\000\002\022\007\000\002\023\012\000\002\025\003\000" +
    "\002\025\003\000\002\027\004\000\002\027\002\000\002" +
    "\030\005\000\002\030\005\000\002\030\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\033\005\000\002\033\005\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\034\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\004\004\005\001\002\000\004\002\153\001" +
    "\002\000\004\101\006\001\002\000\004\016\007\001\002" +
    "\000\016\005\ufffb\032\ufffb\041\ufffb\054\ufffb\064\ufffb\101" +
    "\ufffb\001\002\000\016\005\023\032\026\041\022\054\014" +
    "\064\016\101\uffec\001\002\000\016\005\ufffc\032\ufffc\041" +
    "\ufffc\054\ufffc\064\ufffc\101\ufffc\001\002\000\004\101\107" +
    "\001\002\000\004\016\150\001\002\000\004\101\142\001" +
    "\002\000\004\016\141\001\002\000\004\101\uffed\001\002" +
    "\000\010\005\uffdc\064\016\101\uffec\001\002\000\004\005" +
    "\130\001\002\000\016\005\uffff\032\uffff\041\uffff\054\uffff" +
    "\064\uffff\101\uffff\001\002\000\004\101\100\001\002\000" +
    "\006\006\ufff9\101\ufff9\001\002\000\010\005\uffe3\064\uffe3" +
    "\101\uffe3\001\002\000\016\005\ufffe\032\ufffe\041\ufffe\054" +
    "\ufffe\064\ufffe\101\ufffe\001\002\000\004\101\030\001\002" +
    "\000\010\005\uffe2\064\uffe2\101\uffe2\001\002\000\004\072" +
    "\031\001\002\000\004\105\032\001\002\000\006\015\035" +
    "\016\uffe5\001\002\000\004\016\034\001\002\000\016\005" +
    "\uffeb\032\uffeb\041\uffeb\054\uffeb\064\uffeb\101\uffeb\001\002" +
    "\000\004\105\036\001\002\000\004\016\uffe6\001\002\000" +
    "\006\006\042\101\041\001\002\000\006\006\ufffa\101\ufffa" +
    "\001\002\000\004\013\044\001\002\000\004\015\043\001" +
    "\002\000\004\002\000\001\002\000\016\020\054\075\046" +
    "\076\050\100\053\101\051\105\045\001\002\000\034\007" +
    "\uffcc\010\uffcc\011\uffcc\012\uffcc\015\076\016\uffcc\021\uffcc" +
    "\067\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc\001" +
    "\002\000\032\007\uffca\010\uffca\011\uffca\012\uffca\016\uffca" +
    "\021\uffca\067\uffca\070\uffca\071\uffca\072\uffca\073\uffca\074" +
    "\uffca\001\002\000\030\007\063\010\056\011\060\012\067" +
    "\016\075\067\066\070\070\071\061\072\062\073\065\074" +
    "\071\001\002\000\032\007\uffc9\010\uffc9\011\uffc9\012\uffc9" +
    "\016\uffc9\021\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9\073" +
    "\uffc9\074\uffc9\001\002\000\032\007\uffcb\010\uffcb\011\uffcb" +
    "\012\uffcb\016\uffcb\021\uffcb\067\uffcb\070\uffcb\071\uffcb\072" +
    "\uffcb\073\uffcb\074\uffcb\001\002\000\032\007\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\016\uffd9\021\uffd9\067\uffd9\070\uffd9\071" +
    "\uffd9\072\uffd9\073\uffd9\074\uffd9\001\002\000\032\007\uffc8" +
    "\010\uffc8\011\uffc8\012\uffc8\016\uffc8\021\uffc8\067\uffc8\070" +
    "\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\001\002\000\016" +
    "\020\054\075\046\076\050\100\053\101\051\105\045\001" +
    "\002\000\030\007\063\010\056\011\060\012\067\021\072" +
    "\067\066\070\070\071\061\072\062\073\065\074\071\001" +
    "\002\000\016\020\uffd1\075\uffd1\076\uffd1\100\uffd1\101\uffd1" +
    "\105\uffd1\001\002\000\016\020\054\075\046\076\050\100" +
    "\053\101\051\105\045\001\002\000\016\020\uffd0\075\uffd0" +
    "\076\uffd0\100\uffd0\101\uffd0\105\uffd0\001\002\000\016\020" +
    "\uffd7\075\uffd7\076\uffd7\100\uffd7\101\uffd7\105\uffd7\001\002" +
    "\000\016\020\uffd8\075\uffd8\076\uffd8\100\uffd8\101\uffd8\105" +
    "\uffd8\001\002\000\016\020\uffd2\075\uffd2\076\uffd2\100\uffd2" +
    "\101\uffd2\105\uffd2\001\002\000\016\020\054\075\046\076" +
    "\050\100\053\101\051\105\045\001\002\000\016\020\uffd6" +
    "\075\uffd6\076\uffd6\100\uffd6\101\uffd6\105\uffd6\001\002\000" +
    "\016\020\uffd5\075\uffd5\076\uffd5\100\uffd5\101\uffd5\105\uffd5" +
    "\001\002\000\016\020\uffcf\075\uffcf\076\uffcf\100\uffcf\101" +
    "\uffcf\105\uffcf\001\002\000\016\020\uffd3\075\uffd3\076\uffd3" +
    "\100\uffd3\101\uffd3\105\uffd3\001\002\000\016\020\uffd4\075" +
    "\uffd4\076\uffd4\100\uffd4\101\uffd4\105\uffd4\001\002\000\032" +
    "\007\uffce\010\uffce\011\uffce\012\uffce\016\uffce\021\uffce\067" +
    "\uffce\070\uffce\071\uffce\072\uffce\073\uffce\074\uffce\001\002" +
    "\000\032\007\uffdb\010\uffdb\011\uffdb\012\uffdb\016\uffdb\021" +
    "\uffdb\067\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb" +
    "\001\002\000\032\007\uffda\010\uffda\011\uffda\012\uffda\016" +
    "\uffda\021\uffda\067\uffda\070\uffda\071\uffda\072\uffda\073\uffda" +
    "\074\uffda\001\002\000\006\006\uffc7\101\uffc7\001\002\000" +
    "\004\105\077\001\002\000\032\007\uffcd\010\uffcd\011\uffcd" +
    "\012\uffcd\016\uffcd\021\uffcd\067\uffcd\070\uffcd\071\uffcd\072" +
    "\uffcd\073\uffcd\074\uffcd\001\002\000\006\017\101\020\102" +
    "\001\002\000\010\102\117\103\120\104\116\001\002\000" +
    "\010\021\ufff0\064\016\101\uffec\001\002\000\004\021\122" +
    "\001\002\000\004\021\uffde\001\002\000\004\021\uffdf\001" +
    "\002\000\004\101\107\001\002\000\006\014\113\017\114" +
    "\001\002\000\006\016\111\021\ufff1\001\002\000\006\064" +
    "\016\101\uffec\001\002\000\004\021\ufff2\001\002\000\004" +
    "\101\107\001\002\000\010\102\117\103\120\104\116\001" +
    "\002\000\006\016\uffee\021\uffee\001\002\000\006\016\uffe7" +
    "\021\uffe7\001\002\000\006\016\uffe9\021\uffe9\001\002\000" +
    "\006\016\uffe8\021\uffe8\001\002\000\006\016\uffef\021\uffef" +
    "\001\002\000\004\017\123\001\002\000\010\102\117\103" +
    "\120\104\116\001\002\000\004\016\125\001\002\000\010" +
    "\005\uffe0\064\uffe0\101\uffe0\001\002\000\004\016\127\001" +
    "\002\000\010\005\uffe1\064\uffe1\101\uffe1\001\002\000\004" +
    "\006\131\001\002\000\004\016\132\001\002\000\016\005" +
    "\ufffd\032\ufffd\041\ufffd\054\ufffd\064\ufffd\101\ufffd\001\002" +
    "\000\004\005\136\001\002\000\010\005\uffdc\064\016\101" +
    "\uffec\001\002\000\004\005\uffdd\001\002\000\004\006\137" +
    "\001\002\000\004\016\140\001\002\000\016\005\uffe4\032" +
    "\uffe4\041\uffe4\054\uffe4\064\uffe4\101\uffe4\001\002\000\004" +
    "\005\ufff8\001\002\000\006\016\ufff6\020\143\001\002\000" +
    "\010\021\ufff0\064\016\101\uffec\001\002\000\004\021\ufff3" +
    "\001\002\000\004\021\ufff4\001\002\000\004\021\147\001" +
    "\002\000\004\016\ufff5\001\002\000\004\005\ufff7\001\002" +
    "\000\004\016\152\001\002\000\016\005\uffea\032\uffea\041" +
    "\uffea\054\uffea\064\uffea\101\uffea\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\007\001\001" +
    "\000\026\005\020\006\024\010\014\011\012\016\017\021" +
    "\011\022\023\023\026\024\010\026\016\001\001\000\002" +
    "\001\001\000\004\020\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\133\021\011\027\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\030\046\033\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\063\032\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\054\033\051\001\001\000" +
    "\006\031\063\032\056\001\001\000\002\001\001\000\004" +
    "\033\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\125" +
    "\001\001\000\012\014\104\015\103\021\105\025\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\111\021\105\001\001\000\002\001\001" +
    "\000\004\020\120\001\001\000\004\004\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\133" +
    "\021\011\027\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\145\014\144\015\143\021" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}






    public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }
    
    public void syntax_error(Symbol s){
    System.out.println("compiler has detected a syntax error at line " + s.left 
        + " column " + s.right + " symbol id: " + s.sym);
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {



 Hashtable<String, String> type = new Hashtable();
 Hashtable value = new Hashtable();
 

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= PROGRAM IDENTIFIER SEMICOLON declarations BEGIN program_block END DOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarations ::= declarations constant_declaration1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= declarations variable_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= declarations procedure_declaration BEGIN END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarations ::= declarations function_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // program_block ::= program_block assignment_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_block",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // program_block ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_block",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // procedure_declaration ::= procedure_declaration_without_parenthesis SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // procedure_declaration ::= procedure_declaration_with_parenthesis SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // procedure_declaration_without_parenthesis ::= PROCEDURE IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration_without_parenthesis",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // procedure_declaration_with_parenthesis ::= PROCEDURE IDENTIFIER OPEN_PARENTHESES procedure_arguments CLOSE_PARENTHESES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration_with_parenthesis",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // procedure_arguments ::= arguments1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_arguments",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // procedure_arguments ::= arguments2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_arguments",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arguments1 ::= optional_var list_of_identifiers SEMICOLON arguments1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments1",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // arguments1 ::= optional_var list_of_identifiers 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments1",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arguments2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // list_of_identifiers ::= IDENTIFIER COMMA list_of_identifiers 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if(!type.containsKey(id)){
																			type.put(id, (String) tipo);
																			System.out.println(tipo + " (tipo) - (id) " + id ); 
																	 		RESULT = tipo;
																	 }else{
																	 		report_fatal_error("Variavel ja foi declarada: " + id, id);	
																	 } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_of_identifiers",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // list_of_identifiers ::= IDENTIFIER COLON type_declaration 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(!type.containsKey(id)){
																			type.put(id, (String) tipo);
																			System.out.println(tipo + " (tipo) - (id) " + id ); 
																	 		RESULT = tipo;
																	 }else{
																	 		report_fatal_error("Variavel ja foi declarada: " + id, id);	
																	 } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_of_identifiers",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // optional_var ::= VAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_var",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // optional_var ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_var",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // constant_declaration1 ::= CONST IDENTIFIER EQ number SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_declaration1",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variable_declaration ::= optional_var list_of_identifiers SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type_declaration ::= TYPE_INTEGER 
            {
              Object RESULT =null;
		RESULT = "integer";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type_declaration ::= BOOLEAN 
            {
              Object RESULT =null;
		RESULT = "boolean";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type_declaration ::= STRING 
            {
              Object RESULT =null;
		RESULT = "string";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // number ::= INTEGER DOT INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // number ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // function_declaration ::= function_declaration_aux function_local_declarations BEGIN END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // function_declaration_aux ::= function_declaration_without_parenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_aux",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // function_declaration_aux ::= function_declaration_with_parenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_aux",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // function_declaration_without_parenthesis ::= FUNCTION IDENTIFIER COLON type_declaration SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_without_parenthesis",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // function_declaration_with_parenthesis ::= FUNCTION IDENTIFIER OPEN_PARENTHESES function_arguments CLOSE_PARENTHESES COLON type_declaration SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_with_parenthesis",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // function_arguments ::= arguments1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_arguments",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // function_arguments ::= arguments2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_arguments",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function_local_declarations ::= variable_declaration function_local_declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_local_declarations",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // function_local_declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_local_declarations",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression_declaration ::= expression_declaration op_relational_declaration term_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_declaration",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression_declaration ::= expression_declaration op_aritimetical_declaration term_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_declaration",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression_declaration ::= term_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_declaration",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // op_relational_declaration ::= EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relational_declaration",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // op_relational_declaration ::= GE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relational_declaration",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // op_relational_declaration ::= LE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relational_declaration",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // op_relational_declaration ::= GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relational_declaration",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // op_relational_declaration ::= LT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relational_declaration",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // op_relational_declaration ::= UQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relational_declaration",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // op_aritimetical_declaration ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritimetical_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // op_aritimetical_declaration ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritimetical_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // op_aritimetical_declaration ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritimetical_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // op_aritimetical_declaration ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritimetical_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // term_declaration ::= OPEN_PARENTHESES expression_declaration CLOSE_PARENTHESES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_declaration",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // term_declaration ::= INTEGER DOT INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_declaration",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // term_declaration ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_declaration",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term_declaration ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_declaration",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // term_declaration ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_declaration",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // term_declaration ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_declaration",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // term_declaration ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_declaration",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assignment_declaration ::= IDENTIFIER ASSIGNMENT expression_declaration SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
	if(type.get(id) == null){
		report_error("variavel nao foi declarada", id);
	}
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_declaration",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
