
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package compiladores.analisadorLexico;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\012\000\002\003" +
    "\004\000\002\003\004\000\002\003\007\000\002\003\004" +
    "\000\002\003\002\000\002\031\004\000\002\031\002\000" +
    "\002\016\004\000\002\016\004\000\002\010\004\000\002" +
    "\011\007\000\002\012\003\000\002\012\003\000\002\014" +
    "\006\000\002\014\004\000\002\015\002\000\002\020\005" +
    "\000\002\020\005\000\002\020\007\000\002\021\003\000" +
    "\002\021\002\000\002\005\007\000\002\006\005\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\007" +
    "\005\000\002\007\003\000\002\024\007\000\002\026\003" +
    "\000\002\026\003\000\002\022\007\000\002\023\012\000" +
    "\002\025\003\000\002\025\003\000\002\027\004\000\002" +
    "\027\002\000\002\035\005\000\002\035\005\000\002\035" +
    "\003\000\002\035\005\000\002\035\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\033" +
    "\004\000\002\033\004\000\002\034\005\000\002\034\004" +
    "\000\002\040\005\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\030\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\004\004\005\001\002\000\004\002\172\001" +
    "\002\000\004\071\006\001\002\000\004\012\007\001\002" +
    "\000\016\005\ufffb\026\ufffb\035\ufffb\050\ufffb\060\ufffb\071" +
    "\ufffb\001\002\000\016\005\024\026\027\035\022\050\014" +
    "\060\016\071\uffeb\001\002\000\016\005\ufffc\026\ufffc\035" +
    "\ufffc\050\ufffc\060\ufffc\071\ufffc\001\002\000\004\071\123" +
    "\001\002\000\004\012\167\001\002\000\004\071\161\001" +
    "\002\000\004\012\160\001\002\000\004\071\uffec\001\002" +
    "\000\010\005\uffdb\060\016\071\uffeb\001\002\000\004\005" +
    "\147\001\002\000\016\005\uffff\026\uffff\035\uffff\050\uffff" +
    "\060\uffff\071\uffff\001\002\000\004\071\114\001\002\000" +
    "\010\005\uffe2\060\uffe2\071\uffe2\001\002\000\006\006\ufff9" +
    "\071\ufff9\001\002\000\016\005\ufffe\026\ufffe\035\ufffe\050" +
    "\ufffe\060\ufffe\071\ufffe\001\002\000\010\005\uffe1\060\uffe1" +
    "\071\uffe1\001\002\000\004\071\030\001\002\000\004\102" +
    "\031\001\002\000\004\072\032\001\002\000\006\011\035" +
    "\012\uffe4\001\002\000\004\012\034\001\002\000\016\005" +
    "\uffea\026\uffea\035\uffea\050\uffea\060\uffea\071\uffea\001\002" +
    "\000\004\072\036\001\002\000\004\012\uffe5\001\002\000" +
    "\006\006\042\071\041\001\002\000\006\006\ufffa\071\ufffa" +
    "\001\002\000\004\007\044\001\002\000\004\011\043\001" +
    "\002\000\004\002\000\001\002\000\020\014\051\016\046" +
    "\070\052\071\055\072\045\073\047\074\053\001\002\000" +
    "\046\010\uffc6\012\uffc6\015\uffc6\017\uffc6\040\uffc6\065\uffc6" +
    "\066\uffc6\067\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6\103" +
    "\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6\110\uffc6\001\002" +
    "\000\020\014\051\017\110\070\052\071\055\072\045\073" +
    "\047\074\053\001\002\000\046\010\uffc4\012\uffc4\015\uffc4" +
    "\017\uffc4\040\uffc4\065\uffc4\066\uffc4\067\uffc4\077\uffc4\100" +
    "\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4\106\uffc4" +
    "\107\uffc4\110\uffc4\001\002\000\042\012\uffd6\015\uffd6\040" +
    "\uffd6\065\uffd6\066\uffd6\067\uffd6\077\uffd6\100\uffd6\101\uffd6" +
    "\102\uffd6\103\uffd6\104\uffd6\105\uffd6\106\uffd6\107\uffd6\110" +
    "\uffd6\001\002\000\020\014\051\016\046\070\052\071\055" +
    "\072\045\073\047\074\053\001\002\000\046\010\uffc2\012" +
    "\uffc2\015\uffc2\017\uffc2\040\uffc2\065\uffc2\066\uffc2\067\uffc2" +
    "\077\uffc2\100\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\105" +
    "\uffc2\106\uffc2\107\uffc2\110\uffc2\001\002\000\046\010\uffc3" +
    "\012\uffc3\015\uffc3\017\uffc3\040\uffc3\065\uffc3\066\uffc3\067" +
    "\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3" +
    "\105\uffc3\106\uffc3\107\uffc3\110\uffc3\001\002\000\042\012" +
    "\uffd8\015\uffd8\040\uffd8\065\uffd8\066\uffd8\067\uffd8\077\uffd8" +
    "\100\uffd8\101\uffd8\102\uffd8\103\uffd8\104\uffd8\105\uffd8\106" +
    "\uffd8\107\uffd8\110\uffd8\001\002\000\046\010\uffc5\012\uffc5" +
    "\015\uffc5\017\uffc5\040\uffc5\065\uffc5\066\uffc5\067\uffc5\077" +
    "\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\105\uffc5" +
    "\106\uffc5\107\uffc5\110\uffc5\001\002\000\040\012\061\040" +
    "\064\065\077\066\057\067\072\077\067\100\065\101\074" +
    "\102\076\103\070\104\060\105\062\106\075\107\071\110" +
    "\073\001\002\000\004\016\uffba\001\002\000\016\014\uffd1" +
    "\070\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1\001\002\000" +
    "\006\006\uffb7\071\uffb7\001\002\000\020\014\uffcf\016\uffc1" +
    "\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\001\002\000" +
    "\004\016\046\001\002\000\004\016\uffb8\001\002\000\020" +
    "\014\uffd0\016\uffbc\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074" +
    "\uffd0\001\002\000\016\014\051\070\052\071\055\072\045" +
    "\073\047\074\053\001\002\000\016\014\uffd2\070\uffd2\071" +
    "\uffd2\072\uffd2\073\uffd2\074\uffd2\001\002\000\020\014\uffd3" +
    "\016\uffbb\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\001" +
    "\002\000\020\014\uffcd\016\uffbf\070\uffcd\071\uffcd\072\uffcd" +
    "\073\uffcd\074\uffcd\001\002\000\004\016\uffb9\001\002\000" +
    "\016\014\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc" +
    "\001\002\000\016\014\uffd4\070\uffd4\071\uffd4\072\uffd4\073" +
    "\uffd4\074\uffd4\001\002\000\020\014\uffce\016\uffc0\070\uffce" +
    "\071\uffce\072\uffce\073\uffce\074\uffce\001\002\000\020\014" +
    "\uffd5\016\uffbd\070\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5" +
    "\001\002\000\004\016\uffbe\001\002\000\016\014\051\070" +
    "\052\071\055\072\045\073\047\074\053\001\002\000\042" +
    "\012\uffd9\015\uffd9\040\uffd9\065\uffd9\066\uffd9\067\uffd9\077" +
    "\uffd9\100\uffd9\101\uffd9\102\uffd9\103\uffd9\104\uffd9\105\uffd9" +
    "\106\uffd9\107\uffd9\110\uffd9\001\002\000\042\012\uffda\015" +
    "\uffda\040\uffda\065\uffda\066\uffda\067\uffda\077\uffda\100\uffda" +
    "\101\uffda\102\uffda\103\uffda\104\uffda\105\uffda\106\uffda\107" +
    "\uffda\110\uffda\001\002\000\042\012\uffd7\015\uffd7\040\uffd7" +
    "\065\uffd7\066\uffd7\067\uffd7\077\uffd7\100\uffd7\101\uffd7\102" +
    "\uffd7\103\uffd7\104\uffd7\105\uffd7\106\uffd7\107\uffd7\110\uffd7" +
    "\001\002\000\040\015\105\040\064\065\077\066\057\067" +
    "\072\077\067\100\065\101\074\102\076\103\070\104\060" +
    "\105\062\106\075\107\071\110\073\001\002\000\046\010" +
    "\uffc7\012\uffc7\015\uffc7\017\uffc7\040\uffc7\065\uffc7\066\uffc7" +
    "\067\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\104" +
    "\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7\001\002\000\006" +
    "\010\111\017\112\001\002\000\042\012\uffcb\015\uffcb\040" +
    "\uffcb\065\uffcb\066\uffcb\067\uffcb\077\uffcb\100\uffcb\101\uffcb" +
    "\102\uffcb\103\uffcb\104\uffcb\105\uffcb\106\uffcb\107\uffcb\110" +
    "\uffcb\001\002\000\042\012\uffca\015\uffca\040\uffca\065\uffca" +
    "\066\uffca\067\uffca\077\uffca\100\uffca\101\uffca\102\uffca\103" +
    "\uffca\104\uffca\105\uffca\106\uffca\107\uffca\110\uffca\001\002" +
    "\000\016\014\051\070\052\071\055\072\045\073\047\074" +
    "\053\001\002\000\042\012\uffc8\015\uffc8\040\uffc8\065\uffc8" +
    "\066\uffc8\067\uffc8\077\uffc8\100\uffc8\101\uffc8\102\uffc8\103" +
    "\uffc8\104\uffc8\105\uffc8\106\uffc8\107\uffc8\110\uffc8\001\002" +
    "\000\042\012\uffc9\015\uffc9\040\uffc9\065\uffc9\066\uffc9\067" +
    "\uffc9\077\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9" +
    "\105\uffc9\106\uffc9\107\uffc9\110\uffc9\001\002\000\006\013" +
    "\115\014\116\001\002\000\010\063\134\075\132\076\135" +
    "\001\002\000\010\015\ufff0\060\016\071\uffeb\001\002\000" +
    "\004\015\uffdd\001\002\000\004\015\141\001\002\000\004" +
    "\015\uffde\001\002\000\004\071\123\001\002\000\006\010" +
    "\127\013\130\001\002\000\006\012\125\015\ufff1\001\002" +
    "\000\006\060\016\071\uffeb\001\002\000\004\015\ufff2\001" +
    "\002\000\004\071\123\001\002\000\012\053\133\063\134" +
    "\075\132\076\135\001\002\000\006\012\uffee\015\uffee\001" +
    "\002\000\006\012\uffe6\015\uffe6\001\002\000\004\045\136" +
    "\001\002\000\006\012\uffe8\015\uffe8\001\002\000\006\012" +
    "\uffe7\015\uffe7\001\002\000\010\063\134\075\132\076\135" +
    "\001\002\000\006\012\uffed\015\uffed\001\002\000\006\012" +
    "\uffef\015\uffef\001\002\000\004\013\142\001\002\000\010" +
    "\063\134\075\132\076\135\001\002\000\004\012\144\001" +
    "\002\000\010\005\uffdf\060\uffdf\071\uffdf\001\002\000\004" +
    "\012\146\001\002\000\010\005\uffe0\060\uffe0\071\uffe0\001" +
    "\002\000\004\006\150\001\002\000\004\012\151\001\002" +
    "\000\016\005\ufffd\026\ufffd\035\ufffd\050\ufffd\060\ufffd\071" +
    "\ufffd\001\002\000\004\005\155\001\002\000\010\005\uffdb" +
    "\060\016\071\uffeb\001\002\000\004\005\uffdc\001\002\000" +
    "\004\006\156\001\002\000\004\012\157\001\002\000\016" +
    "\005\uffe3\026\uffe3\035\uffe3\050\uffe3\060\uffe3\071\uffe3\001" +
    "\002\000\004\005\ufff8\001\002\000\006\012\ufff6\014\162" +
    "\001\002\000\010\015\ufff0\060\016\071\uffeb\001\002\000" +
    "\004\015\ufff3\001\002\000\004\015\ufff4\001\002\000\004" +
    "\015\166\001\002\000\004\012\ufff5\001\002\000\004\005" +
    "\ufff7\001\002\000\004\012\171\001\002\000\016\005\uffe9" +
    "\026\uffe9\035\uffe9\050\uffe9\060\uffe9\071\uffe9\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\007\001\001" +
    "\000\026\005\020\006\024\010\014\011\012\016\017\021" +
    "\011\022\022\023\025\024\010\026\016\001\001\000\002" +
    "\001\001\000\004\020\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\152\021\011\027\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\033\047\035\055\040\053\001\001" +
    "\000\002\001\001\000\006\034\106\040\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\033\047\035\103" +
    "\040\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\062\036\077" +
    "\037\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\032\062\036\077\037\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\034\112\040\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\144\001\001\000\012\014\120\015\116\021\121\025\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\125\021\121\001\001\000\002\001" +
    "\001\000\004\020\137\001\001\000\004\004\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\152\021\011\027\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\164\014\163\015" +
    "\162\021\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  class Exp {
	    public String type;
	    public String code;
		public Boolean isSet;
	    

	    public Exp(String t, String code) {
  		  this.type = t;
  		  this.code = code;
		  this.isSet = false;
	    }

		
		public Exp(String t, String code,Boolean isSet) {
  		  this.type = t;
  		  this.code = code;
		  this.isSet = isSet;
	    }
	}


    public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }
    
    public void syntax_error(Symbol s){
    System.out.println("compiler has detected a syntax error at line " + s.left 
        + " column " + s.right + " symbol id: " + s.sym);
	}
	
	public boolean typeCheckAritimetico(String op , Exp e1 , Exp e2){
			
			if(e1.type.equals(e2.type)){
				if(e1.type.equals("integer")){
				 return true;}
				if(e1.type.equals("string")) {
					if(op.equals("+")){
						return true;
					}
					else{return false;}
				}
				else{return false;}
				
			}
			else{
			 return false;
			}
	}
	
	public boolean typeCheckRelacional(String op , Exp e1 , Exp e2){
		if(op == "=" || op == "<>"){
			return true;
		}
		if(e1.type.equals(e2.type)){
			return true;
		}
		else{
			return false;
		}
	}

	public boolean isset;



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


 Hashtable<String, String> type = new Hashtable();
 Hashtable value = new Hashtable();
 
 
 

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= PROGRAM IDENTIFIER SEMICOLON declarations BEGIN program_block END DOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarations ::= declarations constant_declaration1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= declarations variable_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= declarations procedure_declaration BEGIN END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarations ::= declarations function_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // program_block ::= program_block assignment_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_block",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // program_block ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_block",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // procedure_declaration ::= procedure_declaration_without_parenthesis SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // procedure_declaration ::= procedure_declaration_with_parenthesis SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // procedure_declaration_without_parenthesis ::= PROCEDURE IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration_without_parenthesis",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // procedure_declaration_with_parenthesis ::= PROCEDURE IDENTIFIER OPEN_PARENTHESES procedure_arguments CLOSE_PARENTHESES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration_with_parenthesis",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // procedure_arguments ::= arguments1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_arguments",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // procedure_arguments ::= arguments2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_arguments",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arguments1 ::= optional_var list_of_identifiers SEMICOLON arguments1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments1",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // arguments1 ::= optional_var list_of_identifiers 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments1",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arguments2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // list_of_identifiers ::= IDENTIFIER COMMA list_of_identifiers 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if(!type.containsKey(id)){
																			type.put(id, (String) tipo);
																	 		RESULT = tipo;
																	 }else{
																	 		report_fatal_error("Variavel ja foi declarada: " + id, id);	
																	 } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_of_identifiers",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // list_of_identifiers ::= IDENTIFIER COLON type_declaration 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(!type.containsKey(id)){
																			type.put(id, (String) tipo);
																	 		RESULT = tipo;
																	 }else{
																	 		report_fatal_error("Variavel ja foi declarada: " + id, id);	
																	 } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_of_identifiers",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // list_of_identifiers ::= IDENTIFIER COLON SET OF type_declaration 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if(!type.containsKey(id)){
																  			type.put(id, (String) tipo);
																  			RESULT = tipo;
																  }else{
																  		report_fatal_error("Variavel ja foi declarada: " + id, id);
																  } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_of_identifiers",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // optional_var ::= VAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_var",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // optional_var ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_var",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // constant_declaration1 ::= CONST IDENTIFIER EQ number SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_declaration1",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variable_declaration ::= optional_var list_of_identifiers SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type_declaration ::= TYPE_INTEGER 
            {
              Object RESULT =null;
		RESULT = "integer";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type_declaration ::= BOOLEAN 
            {
              Object RESULT =null;
		RESULT = "boolean";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_declaration ::= STRING 
            {
              Object RESULT =null;
		RESULT = "string";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // number ::= INTEGER DOT INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // number ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // function_declaration ::= function_declaration_aux function_local_declarations BEGIN END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // function_declaration_aux ::= function_declaration_without_parenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_aux",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // function_declaration_aux ::= function_declaration_with_parenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_aux",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // function_declaration_without_parenthesis ::= FUNCTION IDENTIFIER COLON type_declaration SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_without_parenthesis",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // function_declaration_with_parenthesis ::= FUNCTION IDENTIFIER OPEN_PARENTHESES function_arguments CLOSE_PARENTHESES COLON type_declaration SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_with_parenthesis",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // function_arguments ::= arguments1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_arguments",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function_arguments ::= arguments2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_arguments",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // function_local_declarations ::= variable_declaration function_local_declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_local_declarations",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // function_local_declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_local_declarations",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression_declaration ::= expression_declaration op_relational_declaration term_declaration 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if(typeCheckRelacional(op ,e1 , e2)){
								Exp e = new Exp("Boolean",e1.code+op+e2.code);
								RESULT = e;
							}
							else{report_fatal_error("Não se pode operar " + e1.type+ " com "+e2.code, e1);}
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_declaration",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression_declaration ::= expression_declaration op_aritimetical_declaration term_declaration 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if(typeCheckAritimetico(op ,e1 ,e2)){
						   		Exp e = new Exp(e1.type,e1.code+op+e2.code);
						   		RESULT = e;
						   }
						   else {
						    report_fatal_error("Não se pode operar " + e1.type+":"+e1.code+ " com "+e2.type+":"+e2.code, e1);
						   }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_declaration",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression_declaration ::= term_declaration 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_declaration",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression_declaration ::= expression_declaration set_op_declaration set_declaration 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						  
						   if(e1.isSet &&e2.isSet){
							   if(e1.type.equals(e2.type)){
								   Exp e = new Exp(e1.type,e1.code + op +e2.code,true);
								   RESULT = e;
							   }
							   else {report_fatal_error("Não se pode operar " + e1.type+":"+e1.code+ " com "+e2.type+":"+e2.code, e1);}
						   }
						   else { report_fatal_error("set não pode ser operado com "+e1.code , e1);}
						   
						   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_declaration",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression_declaration ::= set_declaration 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = s;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_declaration",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // op_relational_declaration ::= EQ 
            {
              String RESULT =null;
		RESULT = "=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relational_declaration",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // op_relational_declaration ::= GE 
            {
              String RESULT =null;
		RESULT = ">=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relational_declaration",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // op_relational_declaration ::= LE 
            {
              String RESULT =null;
		RESULT = "<=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relational_declaration",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // op_relational_declaration ::= GT 
            {
              String RESULT =null;
		RESULT = ">";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relational_declaration",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // op_relational_declaration ::= LT 
            {
              String RESULT =null;
		RESULT = "<";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relational_declaration",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // op_relational_declaration ::= UQ 
            {
              String RESULT =null;
		RESULT = "<>";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relational_declaration",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // op_aritimetical_declaration ::= PLUS 
            {
              String RESULT =null;
		RESULT = "+";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritimetical_declaration",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // op_aritimetical_declaration ::= MINUS 
            {
              String RESULT =null;
		RESULT = "-";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritimetical_declaration",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // op_aritimetical_declaration ::= MULT 
            {
              String RESULT =null;
		RESULT = "*";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritimetical_declaration",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // op_aritimetical_declaration ::= DIV 
            {
              String RESULT =null;
		RESULT = "/";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritimetical_declaration",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // set_declaration ::= OPEN_BRACKETS set_body 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Exp e = new Exp(s.type,OPEN_BRACKETS + s.code,true);
											 RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_declaration",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // set_declaration ::= OPEN_BRACKETS CLOSE_BRACKETS 
            {
              Object RESULT =null;
		Exp e = new Exp(null,OPEN_BRACKETS + CLOSE_BRACKETS,true);
		    									   RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_declaration",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // set_body ::= term_declaration COMMA set_body 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if(t.type.equals(s.type)){
								 RESULT = new Exp(t.type, t.code + "," + s.code);
								}
								else {report_fatal_error("Um set não pode conter dois elemnentos de tipos diferentes");}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_body",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // set_body ::= term_declaration CLOSE_BRACKETS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Exp(t.type,t.code+CLOSE_BRACKETS);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_body",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // term_declaration ::= OPEN_PARENTHESES expression_declaration CLOSE_PARENTHESES 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_declaration",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // term_declaration ::= INTEGER 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Exp e = new Exp("integer",i);
					 RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_declaration",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // term_declaration ::= IDENTIFIER 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Exp e = new Exp(type.get(id),id);
					 RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_declaration",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // term_declaration ::= TRUE 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Exp e = new Exp("Boolean",t);
					 RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_declaration",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term_declaration ::= FALSE 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Exp e = new Exp("Boolean",f);
					 RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_declaration",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // term_declaration ::= STRING_LITERAL 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Exp e = new Exp("string",s);
					 RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_declaration",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // set_op_declaration ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_op_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // set_op_declaration ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_op_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // set_op_declaration ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_op_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // set_op_declaration ::= SYMDIFF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_op_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // set_op_declaration ::= EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_op_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // set_op_declaration ::= UQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_op_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // set_op_declaration ::= LE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_op_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // set_op_declaration ::= INCLUDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_op_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // set_op_declaration ::= EXCLUDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_op_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // set_op_declaration ::= IN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_op_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // assignment_declaration ::= IDENTIFIER ASSIGNMENT expression_declaration SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	if(type.get(id) != null){
		if(type.get(id).equals(e.type)){
				value.put(id,e.code);
		}

		if(e.type == null){value.put(id,e.code);}
		
		else{ report_fatal_error("O tipo " + type.get(id) + " não pode ser associado ao tipo " +e.type, id); }
		
	}
	
	else {
	report_fatal_error("Variavel nao foi declarada anteriormente " + id, id);
	}
	
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_declaration",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
