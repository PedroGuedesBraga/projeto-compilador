
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package compiladores.analisadorLexico;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import compiladores.analisadorLexico.Exp;
import compiladores.analisadorLexico.Function;
import compiladores.analisadorLexico.Procedure;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\002\012\000\002\003" +
    "\004\000\002\003\004\000\002\003\010\000\002\003\010" +
    "\000\002\003\002\000\002\031\004\000\002\031\004\000" +
    "\002\031\004\000\002\031\002\000\002\016\004\000\002" +
    "\016\004\000\002\010\004\000\002\011\007\000\002\012" +
    "\003\000\002\012\003\000\002\014\006\000\002\014\004" +
    "\000\002\015\002\000\002\020\003\000\002\020\003\000" +
    "\002\035\005\000\002\035\005\000\002\034\005\000\002" +
    "\034\007\000\002\021\003\000\002\021\002\000\002\005" +
    "\007\000\002\006\005\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\007\005\000\002\007\003\000" +
    "\002\024\004\000\002\026\003\000\002\026\003\000\002" +
    "\022\007\000\002\023\012\000\002\027\004\000\002\027" +
    "\002\000\002\050\003\000\002\050\003\000\002\051\006" +
    "\000\002\051\004\000\002\052\002\000\002\053\003\000" +
    "\002\053\003\000\002\054\005\000\002\054\005\000\002" +
    "\055\005\000\002\055\007\000\002\044\003\000\002\044" +
    "\003\000\002\046\007\000\002\047\006\000\002\045\005" +
    "\000\002\045\003\000\002\036\005\000\002\036\005\000" +
    "\002\036\003\000\002\036\005\000\002\036\003\000\002" +
    "\036\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\042\004\000\002\042\004\000\002" +
    "\043\005\000\002\043\004\000\002\041\005\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\030\006\000\002\033\011" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\004\004\005\001\002\000\004\002\236\001" +
    "\002\000\004\071\006\001\002\000\004\012\007\001\002" +
    "\000\016\005\ufffb\026\ufffb\035\ufffb\050\ufffb\060\ufffb\071" +
    "\ufffb\001\002\000\016\005\024\026\027\035\022\050\014" +
    "\060\016\071\uffe6\001\002\000\004\005\232\001\002\000" +
    "\004\012\231\001\002\000\004\071\215\001\002\000\004" +
    "\071\210\001\002\000\004\012\207\001\002\000\004\071" +
    "\uffe7\001\002\000\010\005\uffd8\060\016\071\uffe6\001\002" +
    "\000\004\005\200\001\002\000\016\005\uffff\026\uffff\035" +
    "\uffff\050\uffff\060\uffff\071\uffff\001\002\000\004\071\142" +
    "\001\002\000\010\005\uffdd\060\uffdd\071\uffdd\001\002\000" +
    "\010\006\ufff7\061\ufff7\071\ufff7\001\002\000\016\005\ufffe" +
    "\026\ufffe\035\ufffe\050\ufffe\060\ufffe\071\ufffe\001\002\000" +
    "\010\005\uffdc\060\uffdc\071\uffdc\001\002\000\004\071\030" +
    "\001\002\000\004\102\031\001\002\000\004\072\032\001" +
    "\002\000\006\011\035\012\uffdf\001\002\000\004\012\034" +
    "\001\002\000\016\005\uffe5\026\uffe5\035\uffe5\050\uffe5\060" +
    "\uffe5\071\uffe5\001\002\000\004\072\036\001\002\000\004" +
    "\012\uffe0\001\002\000\010\006\047\061\044\071\043\001" +
    "\002\000\010\006\ufff8\061\ufff8\071\ufff8\001\002\000\054" +
    "\006\uffcb\010\uffcb\012\uffcb\015\uffcb\030\uffcb\040\uffcb\061" +
    "\uffcb\065\uffcb\066\uffcb\067\uffcb\071\uffcb\077\uffcb\100\uffcb" +
    "\101\uffcb\102\uffcb\103\uffcb\104\uffcb\105\uffcb\106\uffcb\107" +
    "\uffcb\110\uffcb\001\002\000\010\006\ufffa\061\ufffa\071\ufffa" +
    "\001\002\000\006\007\137\014\116\001\002\000\020\014" +
    "\055\016\052\070\057\071\062\072\051\073\053\074\060" +
    "\001\002\000\054\006\uffcc\010\uffcc\012\uffcc\015\uffcc\030" +
    "\uffcc\040\uffcc\061\uffcc\065\uffcc\066\uffcc\067\uffcc\071\uffcc" +
    "\077\uffcc\100\uffcc\101\uffcc\102\uffcc\103\uffcc\104\uffcc\105" +
    "\uffcc\106\uffcc\107\uffcc\110\uffcc\001\002\000\010\006\ufff9" +
    "\061\ufff9\071\ufff9\001\002\000\004\011\050\001\002\000" +
    "\004\002\000\001\002\000\050\010\uffb1\012\uffb1\015\uffb1" +
    "\017\uffb1\030\uffb1\040\uffb1\065\uffb1\066\uffb1\067\uffb1\077" +
    "\uffb1\100\uffb1\101\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1" +
    "\106\uffb1\107\uffb1\110\uffb1\001\002\000\020\014\055\017" +
    "\133\070\057\071\106\072\051\073\053\074\060\001\002" +
    "\000\050\010\uffaf\012\uffaf\015\uffaf\017\uffaf\030\uffaf\040" +
    "\uffaf\065\uffaf\066\uffaf\067\uffaf\077\uffaf\100\uffaf\101\uffaf" +
    "\102\uffaf\103\uffaf\104\uffaf\105\uffaf\106\uffaf\107\uffaf\110" +
    "\uffaf\001\002\000\046\010\uffc2\012\uffc2\015\uffc2\030\uffc2" +
    "\040\uffc2\065\uffc2\066\uffc2\067\uffc2\077\uffc2\100\uffc2\101" +
    "\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2\106\uffc2\107\uffc2" +
    "\110\uffc2\001\002\000\020\014\055\016\052\070\057\071" +
    "\062\072\051\073\053\074\060\001\002\000\046\010\uffc1" +
    "\012\uffc1\015\uffc1\030\uffc1\040\uffc1\065\uffc1\066\uffc1\067" +
    "\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1\104\uffc1" +
    "\105\uffc1\106\uffc1\107\uffc1\110\uffc1\001\002\000\050\010" +
    "\uffad\012\uffad\015\uffad\017\uffad\030\uffad\040\uffad\065\uffad" +
    "\066\uffad\067\uffad\077\uffad\100\uffad\101\uffad\102\uffad\103" +
    "\uffad\104\uffad\105\uffad\106\uffad\107\uffad\110\uffad\001\002" +
    "\000\050\010\uffae\012\uffae\015\uffae\017\uffae\030\uffae\040" +
    "\uffae\065\uffae\066\uffae\067\uffae\077\uffae\100\uffae\101\uffae" +
    "\102\uffae\103\uffae\104\uffae\105\uffae\106\uffae\107\uffae\110" +
    "\uffae\001\002\000\046\010\uffc4\012\uffc4\015\uffc4\030\uffc4" +
    "\040\uffc4\065\uffc4\066\uffc4\067\uffc4\077\uffc4\100\uffc4\101" +
    "\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4\106\uffc4\107\uffc4" +
    "\110\uffc4\001\002\000\050\010\uffb0\012\uffb0\014\116\015" +
    "\uffb0\030\uffb0\040\uffb0\065\uffb0\066\uffb0\067\uffb0\077\uffb0" +
    "\100\uffb0\101\uffb0\102\uffb0\103\uffb0\104\uffb0\105\uffb0\106" +
    "\uffb0\107\uffb0\110\uffb0\001\002\000\040\030\075\040\067" +
    "\065\104\066\064\067\077\077\073\100\071\101\101\102" +
    "\103\103\074\104\065\105\066\106\102\107\076\110\100" +
    "\001\002\000\004\016\uffa5\001\002\000\016\014\uffbc\070" +
    "\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc\001\002\000\020" +
    "\014\uffba\016\uffac\070\uffba\071\uffba\072\uffba\073\uffba\074" +
    "\uffba\001\002\000\004\016\uffa3\001\002\000\004\016\052" +
    "\001\002\000\020\014\uffbb\016\uffa7\070\uffbb\071\uffbb\072" +
    "\uffbb\073\uffbb\074\uffbb\001\002\000\016\014\055\070\057" +
    "\071\106\072\051\073\053\074\060\001\002\000\016\014" +
    "\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd\001\002" +
    "\000\020\014\uffbe\016\uffa6\070\uffbe\071\uffbe\072\uffbe\073" +
    "\uffbe\074\uffbe\001\002\000\004\005\110\001\002\000\020" +
    "\014\uffb8\016\uffaa\070\uffb8\071\uffb8\072\uffb8\073\uffb8\074" +
    "\uffb8\001\002\000\004\016\uffa4\001\002\000\016\014\uffb7" +
    "\070\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7\001\002\000" +
    "\016\014\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf" +
    "\001\002\000\020\014\uffb9\016\uffab\070\uffb9\071\uffb9\072" +
    "\uffb9\073\uffb9\074\uffb9\001\002\000\020\014\uffc0\016\uffa8" +
    "\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0\001\002\000" +
    "\004\016\uffa9\001\002\000\016\014\055\070\057\071\106" +
    "\072\051\073\053\074\060\001\002\000\050\010\uffb0\012" +
    "\uffb0\015\uffb0\017\uffb0\030\uffb0\040\uffb0\065\uffb0\066\uffb0" +
    "\067\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0\103\uffb0\104" +
    "\uffb0\105\uffb0\106\uffb0\107\uffb0\110\uffb0\001\002\000\046" +
    "\010\uffc5\012\uffc5\015\uffc5\030\uffc5\040\uffc5\065\uffc5\066" +
    "\uffc5\067\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5" +
    "\104\uffc5\105\uffc5\106\uffc5\107\uffc5\110\uffc5\001\002\000" +
    "\010\006\ufff7\061\ufff7\071\ufff7\001\002\000\010\006\112" +
    "\061\044\071\043\001\002\000\004\012\113\001\002\000" +
    "\010\006\uffa1\061\uffa1\071\uffa1\001\002\000\046\010\uffc6" +
    "\012\uffc6\015\uffc6\030\uffc6\040\uffc6\065\uffc6\066\uffc6\067" +
    "\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6" +
    "\105\uffc6\106\uffc6\107\uffc6\110\uffc6\001\002\000\046\010" +
    "\uffc3\012\uffc3\015\uffc3\030\uffc3\040\uffc3\065\uffc3\066\uffc3" +
    "\067\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104" +
    "\uffc3\105\uffc3\106\uffc3\107\uffc3\110\uffc3\001\002\000\022" +
    "\014\055\015\121\016\052\070\057\071\062\072\051\073" +
    "\053\074\060\001\002\000\004\015\125\001\002\000\042" +
    "\010\123\015\uffc7\040\067\065\104\066\064\067\077\077" +
    "\073\100\071\101\101\102\103\103\074\104\065\105\066" +
    "\106\102\107\076\110\100\001\002\000\004\012\122\001" +
    "\002\000\054\006\uffc9\010\uffc9\012\uffc9\015\uffc9\030\uffc9" +
    "\040\uffc9\061\uffc9\065\uffc9\066\uffc9\067\uffc9\071\uffc9\077" +
    "\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\105\uffc9" +
    "\106\uffc9\107\uffc9\110\uffc9\001\002\000\020\014\055\016" +
    "\052\070\057\071\062\072\051\073\053\074\060\001\002" +
    "\000\004\015\uffc8\001\002\000\004\012\126\001\002\000" +
    "\054\006\uffca\010\uffca\012\uffca\015\uffca\030\uffca\040\uffca" +
    "\061\uffca\065\uffca\066\uffca\067\uffca\071\uffca\077\uffca\100" +
    "\uffca\101\uffca\102\uffca\103\uffca\104\uffca\105\uffca\106\uffca" +
    "\107\uffca\110\uffca\001\002\000\040\015\130\040\067\065" +
    "\104\066\064\067\077\077\073\100\071\101\101\102\103" +
    "\103\074\104\065\105\066\106\102\107\076\110\100\001" +
    "\002\000\050\010\uffb2\012\uffb2\015\uffb2\017\uffb2\030\uffb2" +
    "\040\uffb2\065\uffb2\066\uffb2\067\uffb2\077\uffb2\100\uffb2\101" +
    "\uffb2\102\uffb2\103\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2" +
    "\110\uffb2\001\002\000\006\010\134\017\135\001\002\000" +
    "\046\010\uffb6\012\uffb6\015\uffb6\030\uffb6\040\uffb6\065\uffb6" +
    "\066\uffb6\067\uffb6\077\uffb6\100\uffb6\101\uffb6\102\uffb6\103" +
    "\uffb6\104\uffb6\105\uffb6\106\uffb6\107\uffb6\110\uffb6\001\002" +
    "\000\046\010\uffb5\012\uffb5\015\uffb5\030\uffb5\040\uffb5\065" +
    "\uffb5\066\uffb5\067\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5" +
    "\103\uffb5\104\uffb5\105\uffb5\106\uffb5\107\uffb5\110\uffb5\001" +
    "\002\000\016\014\055\070\057\071\106\072\051\073\053" +
    "\074\060\001\002\000\046\010\uffb3\012\uffb3\015\uffb3\030" +
    "\uffb3\040\uffb3\065\uffb3\066\uffb3\067\uffb3\077\uffb3\100\uffb3" +
    "\101\uffb3\102\uffb3\103\uffb3\104\uffb3\105\uffb3\106\uffb3\107" +
    "\uffb3\110\uffb3\001\002\000\046\010\uffb4\012\uffb4\015\uffb4" +
    "\030\uffb4\040\uffb4\065\uffb4\066\uffb4\067\uffb4\077\uffb4\100" +
    "\uffb4\101\uffb4\102\uffb4\103\uffb4\104\uffb4\105\uffb4\106\uffb4" +
    "\107\uffb4\110\uffb4\001\002\000\020\014\055\016\052\070" +
    "\057\071\062\072\051\073\053\074\060\001\002\000\040" +
    "\012\141\040\067\065\104\066\064\067\077\077\073\100" +
    "\071\101\101\102\103\103\074\104\065\105\066\106\102" +
    "\107\076\110\100\001\002\000\010\006\uffa2\061\uffa2\071" +
    "\uffa2\001\002\000\006\013\143\014\144\001\002\000\010" +
    "\063\162\075\160\076\163\001\002\000\010\015\uffd3\060" +
    "\016\071\uffe6\001\002\000\004\015\172\001\002\000\004" +
    "\071\154\001\002\000\004\015\uffd6\001\002\000\004\015" +
    "\uffd7\001\002\000\006\012\uffd2\015\uffd2\001\002\000\006" +
    "\012\170\015\uffd4\001\002\000\006\012\uffd1\015\uffd1\001" +
    "\002\000\006\010\155\013\156\001\002\000\004\071\154" +
    "\001\002\000\012\053\161\063\162\075\160\076\163\001" +
    "\002\000\006\012\uffcf\015\uffcf\001\002\000\006\012\uffe1" +
    "\015\uffe1\001\002\000\004\045\164\001\002\000\006\012" +
    "\uffe3\015\uffe3\001\002\000\006\012\uffe2\015\uffe2\001\002" +
    "\000\010\063\162\075\160\076\163\001\002\000\006\012" +
    "\uffcd\015\uffcd\001\002\000\006\012\uffd0\015\uffd0\001\002" +
    "\000\006\012\uffce\015\uffce\001\002\000\006\060\016\071" +
    "\uffe6\001\002\000\004\015\uffd5\001\002\000\004\013\173" +
    "\001\002\000\010\063\162\075\160\076\163\001\002\000" +
    "\004\012\175\001\002\000\010\005\uffda\060\uffda\071\uffda" +
    "\001\002\000\004\012\177\001\002\000\010\005\uffdb\060" +
    "\uffdb\071\uffdb\001\002\000\010\006\ufff7\061\ufff7\071\ufff7" +
    "\001\002\000\010\006\202\061\044\071\043\001\002\000" +
    "\004\012\203\001\002\000\016\005\ufffd\026\ufffd\035\ufffd" +
    "\050\ufffd\060\ufffd\071\ufffd\001\002\000\004\005\uffde\001" +
    "\002\000\010\005\uffd8\060\016\071\uffe6\001\002\000\004" +
    "\005\uffd9\001\002\000\004\005\ufff6\001\002\000\006\012" +
    "\ufff4\014\211\001\002\000\010\015\uffd3\060\016\071\uffe6" +
    "\001\002\000\004\015\213\001\002\000\004\012\ufff3\001" +
    "\002\000\004\012\uffec\001\002\000\006\010\221\013\222" +
    "\001\002\000\004\012\220\001\002\000\004\012\uffed\001" +
    "\002\000\016\005\uffe4\026\uffe4\035\uffe4\050\uffe4\060\uffe4" +
    "\071\uffe4\001\002\000\004\071\215\001\002\000\012\053" +
    "\224\063\162\075\160\076\163\001\002\000\004\012\uffea" +
    "\001\002\000\004\045\225\001\002\000\010\063\162\075" +
    "\160\076\163\001\002\000\004\012\uffe8\001\002\000\004" +
    "\012\uffe9\001\002\000\004\012\uffeb\001\002\000\004\005" +
    "\ufff5\001\002\000\010\006\ufff7\061\ufff7\071\ufff7\001\002" +
    "\000\010\006\234\061\044\071\043\001\002\000\004\012" +
    "\235\001\002\000\016\005\ufffc\026\ufffc\035\ufffc\050\ufffc" +
    "\060\ufffc\071\ufffc\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\007\001\001" +
    "\000\026\005\020\006\024\010\014\011\011\016\017\021" +
    "\012\022\022\023\025\024\010\026\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\215\034\213\035" +
    "\216\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\204\021\012\027\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\030\041\033\045\044\037\046\044\047\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\036\062\041\060\042\053\044\055\046" +
    "\044\047\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\041\130\043\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\036\126\041\060\042\053\044\055\046" +
    "\044\047\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\032\067\037\104\040\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\114\001\001\000\002\001\001\000\004\041\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\110\001\001\000\014\030" +
    "\041\033\045\044\037\046\044\047\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\036\117\041\060\042\053\044\055\045\116" +
    "\046\044\047\040\001\001\000\002\001\001\000\010\032" +
    "\067\037\104\040\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\036\117\041\060\042\053\044\055\045" +
    "\123\046\044\047\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\032\067\037\104\040" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\041\130\043\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\036\137" +
    "\041\060\042\053\044\055\046\044\047\040\001\001\000" +
    "\010\032\067\037\104\040\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\175\001\001\000\012\021" +
    "\145\050\144\051\147\052\146\001\001\000\002\001\001" +
    "\000\010\053\151\054\150\055\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\054\165\055" +
    "\166\001\001\000\004\004\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\145\051" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\200\001\001" +
    "\000\014\030\041\033\045\044\037\046\044\047\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\204\021\012\027\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\145" +
    "\050\211\051\147\052\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\034" +
    "\226\035\227\001\001\000\004\004\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\232\001\001\000\014\030\041\033" +
    "\045\044\037\046\044\047\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }
    
    public void syntax_error(Symbol s){
    System.out.println("compiler has detected a syntax error at line " + s.left 
        + " column " + s.right + " symbol id: " + s.sym);
	}
	
	public boolean typeCheckAritimetico(String op , Exp e1 , Exp e2){
			if(e1.isSet || e2.isSet){
				return false;
			}
			
			if(e1.type.equals(e2.type)){
				if(e1.type.equalsIgnoreCase("integer")){
				 return true;
				 }
				if(e1.type.equalsIgnoreCase("string")) {
					if(op.equals("+")){
						return true;
					}
					else{return false;}
				}
				else{return false;}
				
			}
			else{
			 return false;
			}
	}
	
	public boolean typeCheckRelacional(String op , Exp e1 , Exp e2){
		if(op == "=" || op == "<>"){
			return true;
		}
		
		if(((!e1.isSet) && (e2.isSet)) || (e1.isSet && !e2.isSet)){
			return false;
		}
		
		if(e1.type.equalsIgnoreCase(e2.type)){
			return true;
		}
		else{
			return false;
		}
	}
	
	
	
	

	public boolean isset;



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


 Hashtable<String, String> type = new Hashtable();
 Hashtable<String, String> value = new Hashtable();
 
 //Esse conjunto tem os identificadores para sets.
Set<String> setIdentifiers = new TreeSet<String>();

LinkedList<Function> functions = new LinkedList<Function>();
LinkedList<Procedure> procedures = new LinkedList<Procedure>();


//Vai representar os tipos dos argumentos da funcao que está sendo definida no momento
LinkedList<Argument> arguments = new LinkedList<Argument>();

//Vai ter os argumentos da funcao que foi chamada no momento.
LinkedList<Argument> functionCallArguments = new LinkedList<Argument>();


//checa se uma funcao ja existe
public boolean containsFunction(Function f){
	for(Function fun : functions){
		if(fun.equals(f)){
			return true;
		}
	}
	return false;
}

//recebe o nome da funcao chamada e os argumentos passados como parametro
public void checkChamadaDeFuncao(String nomeDaFuncao, LinkedList<Argument> argumentosPassados){
	boolean existeFuncao = false;
	int numeroArgumentosIguais = 0;
	for(Function f : functions){
		numeroArgumentosIguais = 0;
		if(f.getIdentificador().equals(nomeDaFuncao)){
			List<Argument> argumentosDaFuncao = f.getArguments();
			if(argumentosDaFuncao.size() == argumentosPassados.size()){
				for(int i = 0; i < argumentosDaFuncao.size(); i++){
					if(argumentosDaFuncao.get(i).getArgumentType().equalsIgnoreCase(argumentosPassados.get(i).getArgumentType())){
						if(argumentosDaFuncao.get(i).isSet() == argumentosPassados.get(i).isSet()){
							numeroArgumentosIguais+=1;
						}
					}
				}
			}
		}
		if(numeroArgumentosIguais == argumentosPassados.size()){
					existeFuncao = true;
					break;
				}
	}
	
	if(!existeFuncao){
		report_fatal_error("Funcao chamada nao existe: " + nomeDaFuncao, null);	
	}


}



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= PROGRAM IDENTIFIER SEMICOLON declarations BEGIN program_block END DOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarations ::= declarations constant_declaration1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= declarations variable_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= declarations procedure_declaration BEGIN program_block END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarations ::= declarations function_declaration BEGIN program_block END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // program_block ::= program_block assignment_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_block",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // program_block ::= program_block while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_block",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // program_block ::= program_block function_or_procedure_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_block",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // program_block ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_block",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // procedure_declaration ::= procedure_declaration_without_parenthesis SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // procedure_declaration ::= procedure_declaration_with_parenthesis SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // procedure_declaration_without_parenthesis ::= PROCEDURE IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Procedure p; 
																		p = new Procedure(id, new LinkedList<Argument>());
																	   	if(this.procedures.contains(p)){
																	   		report_fatal_error("Procedure: " +id+" -> ja declarada anteriormente!", id);
																	   	}else{
																	   		this.procedures.add(p);
																	   		
																	   	}
																	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration_without_parenthesis",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // procedure_declaration_with_parenthesis ::= PROCEDURE IDENTIFIER OPEN_PARENTHESES functions_or_procedures_arguments CLOSE_PARENTHESES 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
																																		Procedure p;
																																		p = new Procedure(id, arguments);
																																		if(!procedures.contains(p)){
																																			procedures.add(p);
																																			arguments = new LinkedList<Argument>();
																																			
																																		}else{
																																			report_fatal_error("Procedure: " + id + " ja declarada anteriormente!", p);
																																		}																											
																																		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration_with_parenthesis",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // procedure_arguments ::= arguments1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_arguments",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // procedure_arguments ::= arguments2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_arguments",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arguments1 ::= optional_var list_of_identifiers SEMICOLON arguments1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments1",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // arguments1 ::= optional_var list_of_identifiers 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments1",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arguments2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments2",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // list_of_identifiers ::= list_of_non_set_identifiers 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_of_identifiers",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // list_of_identifiers ::= list_of_set_identifiers 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_of_identifiers",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // list_of_non_set_identifiers ::= IDENTIFIER COMMA list_of_non_set_identifiers 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if(!type.containsKey(id)){
																			type.put(id, (String) tipo);
																	 		RESULT = tipo;
																	 }else{
																	 		report_fatal_error("Variavel ja foi declarada: " + id, id);	
																	 } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_of_non_set_identifiers",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // list_of_non_set_identifiers ::= IDENTIFIER COLON type_declaration 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(!type.containsKey(id)){
																			type.put(id, (String) tipo);
																	 		RESULT = tipo;
																	 }else{
																	 		report_fatal_error("Variavel ja foi declarada: " + id, id);	
																	 } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_of_non_set_identifiers",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // list_of_set_identifiers ::= IDENTIFIER COMMA list_of_set_identifiers 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if(!type.containsKey(id)){
																			type.put(id, (String) tipo);
																			setIdentifiers.add(id);
																	 		RESULT = tipo;
																	 }else{
																	 		report_fatal_error("Variavel ja foi declarada: " + id, id);	
																	 } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_of_set_identifiers",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // list_of_set_identifiers ::= IDENTIFIER COLON SET OF type_declaration 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if(!type.containsKey(id)){
																  			type.put(id, (String) tipo);
																  			setIdentifiers.add(id);
																  			RESULT = tipo;
																  			
																  			
																  }else{
																  		report_fatal_error("Variavel ja foi declarada: " + id, id);
																  } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_of_set_identifiers",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // optional_var ::= VAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_var",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // optional_var ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optional_var",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // constant_declaration1 ::= CONST IDENTIFIER EQ number SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_declaration1",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // variable_declaration ::= optional_var list_of_identifiers SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type_declaration ::= TYPE_INTEGER 
            {
              Object RESULT =null;
		RESULT = "integer";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type_declaration ::= BOOLEAN 
            {
              Object RESULT =null;
		RESULT = "boolean";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type_declaration ::= STRING 
            {
              Object RESULT =null;
		RESULT = "string";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // number ::= INTEGER DOT INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // number ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // function_declaration ::= function_declaration_aux function_local_declarations 
            {
              Object RESULT =null;
		arguments = new LinkedList<Argument>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function_declaration_aux ::= function_declaration_without_parenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_aux",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // function_declaration_aux ::= function_declaration_with_parenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_aux",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // function_declaration_without_parenthesis ::= FUNCTION IDENTIFIER COLON type_declaration SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 

																					Function f = new Function(id, (String) t, arguments);
																					
																					if(!containsFunction(f)){
																						functions.add(f);
																						
																					}else{
																						report_fatal_error("A funcao: " + id + " ja foi declarada!", id);
																					}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_without_parenthesis",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // function_declaration_with_parenthesis ::= FUNCTION IDENTIFIER OPEN_PARENTHESES functions_or_procedures_arguments CLOSE_PARENTHESES COLON type_declaration SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Function f = new Function(id, (String) t, arguments);
															
															if(!containsFunction(f)){
																functions.add(f);
																arguments = new LinkedList();
															}else{
																report_fatal_error("A funcao: " + id + " ja foi declarada!", id);
															}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_with_parenthesis",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // function_local_declarations ::= variable_declaration function_local_declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_local_declarations",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // function_local_declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_local_declarations",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // functions_or_procedures_arguments ::= functions_or_procedures_arguments1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_or_procedures_arguments",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // functions_or_procedures_arguments ::= functions_or_procedures_arguments2 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_or_procedures_arguments",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // functions_or_procedures_arguments1 ::= optional_var list_of_identifiers_functions_or_procedures SEMICOLON functions_or_procedures_arguments1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_or_procedures_arguments1",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // functions_or_procedures_arguments1 ::= optional_var list_of_identifiers_functions_or_procedures 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_or_procedures_arguments1",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // functions_or_procedures_arguments2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_or_procedures_arguments2",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // list_of_identifiers_functions_or_procedures ::= list_of_non_set_identifiers_functions_or_procedures 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_of_identifiers_functions_or_procedures",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // list_of_identifiers_functions_or_procedures ::= list_of_set_identifiers_functions_or_procedures 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_of_identifiers_functions_or_procedures",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // list_of_non_set_identifiers_functions_or_procedures ::= IDENTIFIER COMMA list_of_non_set_identifiers_functions_or_procedures 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
																				   Argument argument = new Argument(id, (String) tipo, false);
																				   if(!arguments.contains(argument)){
																				   	   arguments.addFirst(argument);
																					   															
																					   RESULT = (String) tipo;
																				   }else{
																				  	report_fatal_error("Dois argumentos com o mesmo identificador: " + id, argument);
																				   }   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_of_non_set_identifiers_functions_or_procedures",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // list_of_non_set_identifiers_functions_or_procedures ::= IDENTIFIER COLON type_declaration 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  Argument argument = new Argument(id, (String) tipo, true);
																			
																				   if(!arguments.contains(argument)){
																				   	   arguments.addFirst(argument);
																					   RESULT = (String) tipo;																		
																				   }else{
																				 	report_fatal_error("Dois argumentos com o mesmo identificador: " + id, argument);
																				   } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_of_non_set_identifiers_functions_or_procedures",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // list_of_set_identifiers_functions_or_procedures ::= IDENTIFIER COMMA list_of_set_identifiers_functions_or_procedures 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Argument argument = new Argument(id, (String) tipo, true);
																				   if(!arguments.contains(argument)){
																				   	   arguments.addFirst(argument);
																					   RESULT = (String) tipo;																		
																				   }else{
																				  	report_fatal_error("Dois argumentos com o mesmo identificador: " + id, argument);
																				   }  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_of_set_identifiers_functions_or_procedures",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // list_of_set_identifiers_functions_or_procedures ::= IDENTIFIER COLON SET OF type_declaration 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
																				Argument argument = new Argument(id, (String) tipo, true);
																					
																				   if(!arguments.contains(argument)){
																				   	   arguments.addFirst(argument);
																					   RESULT = (String) tipo;																		
																				   }else{
																				   	report_fatal_error("Dois argumentos com o mesmo identificador: " + id, argument);
																				   }
																				 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_of_set_identifiers_functions_or_procedures",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // function_or_procedure_call ::= function_or_procedure_call_with_arguments 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_or_procedure_call",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // function_or_procedure_call ::= function_or_procedure_call_without_arguments 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_or_procedure_call",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // function_or_procedure_call_with_arguments ::= IDENTIFIER OPEN_PARENTHESES function_or_procedure_call_arguments CLOSE_PARENTHESES SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 
																																			checkChamadaDeFuncao(id, functionCallArguments);
																																			functionCallArguments = new LinkedList<Argument>(); //Reseta a variavel

																																			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_or_procedure_call_with_arguments",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // function_or_procedure_call_without_arguments ::= IDENTIFIER OPEN_PARENTHESES CLOSE_PARENTHESES SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_or_procedure_call_without_arguments",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // function_or_procedure_call_arguments ::= expression_declaration COMMA function_or_procedure_call_arguments 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
																											 //Argumento de chamada de funcao. Não importa o identificador dele
																											Argument callArgument = new Argument("DoesNotMatter", e.type, e.isSet);
																											functionCallArguments.addFirst(callArgument);
																											
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_or_procedure_call_arguments",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // function_or_procedure_call_arguments ::= expression_declaration 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //Argumento de chamada de funcao. Não importa o identificador dele
																	Argument callArgument = new Argument("DoesNotMatter", e.type, e.isSet);
																	functionCallArguments.addFirst(callArgument);
																	RESULT = e;												
																	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_or_procedure_call_arguments",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression_declaration ::= expression_declaration op_relational_declaration term_declaration 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if(typeCheckRelacional(op ,e1 , e2)){
								Exp e = new Exp("Boolean",e1.code+op+e2.code);
								RESULT = e;
							}
							
							else{
								String e1IsSet = (e1.isSet) ? "Set of " : "";
								String e2IsSet = (e2.isSet) ? "Set of " : "";
								report_fatal_error("Não se pode operar " + e1IsSet + e1.type+ " com "+ e2IsSet + e2.type, e1);
							}
							
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_declaration",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression_declaration ::= expression_declaration op_aritimetical_declaration term_declaration 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if(typeCheckAritimetico(op ,e1 ,e2)){
						   		Exp e = new Exp(e1.type,e1.code+op+e2.code);
						   		RESULT = e;
						   }
						   else {
						    String e1IsSet = (e1.isSet) ? "Set of " : "";
							String e2IsSet = (e2.isSet) ? "Set of " : "";
							report_fatal_error("Não se pode operar " + e1IsSet + e1.type+ " com "+ e2IsSet + e2.code, e1);
						   }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_declaration",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression_declaration ::= term_declaration 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_declaration",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression_declaration ::= expression_declaration set_op_declaration set_declaration 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						  
						   if(e1.isSet &&e2.isSet){
							   if(e1.type.equals(e2.type)){
								   Exp e = new Exp(e1.type,e1.code + op +e2.code,true);
								   RESULT = e;
							   }
							   else {report_fatal_error("Não se pode operar dois sets de tipos diferentes: " +e1.type+": "+e1.code+ " com "+e2.type+": "+e2.code, e1);}
						   }
						   else { report_fatal_error("A operacao nao ocorre entre dois sets!", e1);}
						   
						   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_declaration",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression_declaration ::= set_declaration 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = s;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_declaration",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression_declaration ::= function_or_procedure_call 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_declaration",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // op_relational_declaration ::= EQ 
            {
              String RESULT =null;
		RESULT = "=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relational_declaration",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // op_relational_declaration ::= GE 
            {
              String RESULT =null;
		RESULT = ">=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relational_declaration",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // op_relational_declaration ::= LE 
            {
              String RESULT =null;
		RESULT = "<=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relational_declaration",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // op_relational_declaration ::= GT 
            {
              String RESULT =null;
		RESULT = ">";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relational_declaration",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // op_relational_declaration ::= LT 
            {
              String RESULT =null;
		RESULT = "<";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relational_declaration",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // op_relational_declaration ::= UQ 
            {
              String RESULT =null;
		RESULT = "<>";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_relational_declaration",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // op_aritimetical_declaration ::= PLUS 
            {
              String RESULT =null;
		RESULT = "+";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritimetical_declaration",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // op_aritimetical_declaration ::= MINUS 
            {
              String RESULT =null;
		RESULT = "-";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritimetical_declaration",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // op_aritimetical_declaration ::= MULT 
            {
              String RESULT =null;
		RESULT = "*";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritimetical_declaration",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // op_aritimetical_declaration ::= DIV 
            {
              String RESULT =null;
		RESULT = "/";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritimetical_declaration",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // set_declaration ::= OPEN_BRACKETS set_body 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Exp e = new Exp(s.type,"[" + s.code,true);
											 RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_declaration",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // set_declaration ::= OPEN_BRACKETS CLOSE_BRACKETS 
            {
              Exp RESULT =null;
		Exp e = new Exp(null,"[" + "]",true);
		    									   RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_declaration",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // set_body ::= term_declaration COMMA set_body 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if(t.type.equals(s.type)){
								 RESULT = new Exp(t.type, t.code + "," + s.code);
								}
								else {report_fatal_error("Um set não pode conter dois elementos de tipos diferentes", null);}
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_body",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // set_body ::= term_declaration CLOSE_BRACKETS 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Exp(t.type,t.code+"]");
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_body",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // term_declaration ::= OPEN_PARENTHESES expression_declaration CLOSE_PARENTHESES 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_declaration",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // term_declaration ::= INTEGER 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Exp e = new Exp("integer",i);
					 RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_declaration",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // term_declaration ::= IDENTIFIER 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					 Exp e;
					 if(setIdentifiers.contains(id)){
					 	e = new Exp(type.get(id), id, true);
					 }else{
					 	e = new Exp(type.get(id),id);
					 }
					 RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_declaration",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // term_declaration ::= TRUE 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Exp e = new Exp("Boolean",t);
					 RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_declaration",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // term_declaration ::= FALSE 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Exp e = new Exp("Boolean",f);
					 RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_declaration",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // term_declaration ::= STRING_LITERAL 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Exp e = new Exp("string",s);
					 RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_declaration",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // set_op_declaration ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_op_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // set_op_declaration ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_op_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // set_op_declaration ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_op_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // set_op_declaration ::= SYMDIFF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_op_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // set_op_declaration ::= EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_op_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // set_op_declaration ::= UQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_op_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // set_op_declaration ::= LE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_op_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // set_op_declaration ::= INCLUDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_op_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // set_op_declaration ::= EXCLUDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_op_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // set_op_declaration ::= IN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_op_declaration",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // assignment_declaration ::= IDENTIFIER ASSIGNMENT expression_declaration SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	if(type.get(id) != null){
		
		
		if(!e.isSet && !setIdentifiers.contains(id) && type.get(id).equalsIgnoreCase(e.type)){
				value.put(id,e.code);
		}
		else if(e.isSet && setIdentifiers.contains(id)){
			if(!e.code.equalsIgnoreCase("[]") && e.type.equalsIgnoreCase(type.get(id))){
				value.put(id, e.code);
			}else if (e.code.equalsIgnoreCase("[]")){
				value.put(id, e.code);
			}else{
				report_fatal_error("A variavel do tipo set of " + type.get(id) + " nao pode ser associada a um set of " +  e.type, null);
			}
		}

		else if(setIdentifiers.contains(id) && e.type == null){
			value.put(id,e.code);
		
		}
		
		else{ 
			if(!setIdentifiers.contains(id) && !e.isSet) {
				report_fatal_error("O tipo " + type.get(id) + " não pode ser associado ao tipo " +e.type, null); 			
			}
			else if (!setIdentifiers.contains(id) && e.isSet){
				report_fatal_error("A variavel: " + id + " não é um set!", null); 
			}
			else if (setIdentifiers.contains(id) && !e.isSet){
				report_fatal_error("O valor atribuido a variavel: " + id + " não é um set!", null); 
			}
		}
	}
	else {
	report_fatal_error("Variavel nao foi declarada anteriormente " + id, id);
	}
	
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_declaration",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // while ::= WHILE expression_declaration DO BEGIN program_block END SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		if(e.type.equalsIgnoreCase("Boolean")==false){
	report_fatal_error("Condição de parada não é uma expressão boleana", null);
}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
