package compiladores.analisadorLexico;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:

    public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }
    
    public void syntax_error(Symbol s){
    System.out.println("compiler has detected a syntax error at line " + s.left 
        + " column " + s.right);
	}

:};

terminal PROGRAM, BEGIN, END, IDENTIFIER, PLUS, MINUS, MULT, DIV, ASSIGNMENT, COMMA, DOT,
SEMICOLON, COLON, OPEN_PARENTHESES, CLOSE_PARENTHESES, OPEN_BRACKETS, CLOSE_BRACKETS, OPEN_CURLY_BRACKETS,
CLOSE_CURLY_BRACKETS, CRASIS, AND, ARRAY, CASE, CONST, INTEGER_DIV, DO, DOWNTO, ELSE, FILE, FOR,
FUNCTION, GOTO, IF, IN, LABEL, MOD, NIL, NOT, OF, OR, PACKED, PROCEDURE, RECORD, REPEAT, SET,
THEN, TO, TYPE, UNTIL, VAR, WHILE, WITH, INTEGER, GT, GE, EQ, LE, LT, TRUE, FALSE, BOOLEAN, TYPE_INTEGER, STRING, REAL;

non terminal program, declarations, number, type_declaration, constant_declaration1, variable_declaration1, empty;

start with program;


program ::= PROGRAM IDENTIFIER SEMICOLON declarations BEGIN END DOT;

declarations ::= constant_declaration1 
				 | 
				 variable_declaration1
				 |
				 empty
				 ; 

constant_declaration1 ::= CONST IDENTIFIER EQ number SEMICOLON;

variable_declaration1 ::= VAR IDENTIFIER COLON type_declaration SEMICOLON;

type_declaration ::= TYPE_INTEGER 
					 | 
					 BOOLEAN 
					 | 
					 STRING 
					 | 
					 REAL
					 ;

number ::= INTEGER 
		   | 
		   INTEGER DOT INTEGER
		   ;









 



