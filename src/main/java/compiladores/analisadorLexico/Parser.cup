package compiladores.analisadorLexico;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:

    public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }

:};

terminal PROGRAM, BEGIN, END, IDENTIFIER, PLUS, MINUS, MULT, DIV, ASSIGNMENT, COMMA, DOT,
SEMICOLON, OPEN_PARENTHESES, CLOSE_PARENTHESES, OPEN_BRACKETS, CLOSE_BRACKETS, OPEN_CURLY_BRACKETS,
CLOSE_CURLY_BRACKETS, CRASIS, AND, ARRAY, CASE, CONST, INTEGER_DIV, DO, DOWNTO, ELSE, FILE, FOR,
FUNCTION, GOTO, IF, IN, LABEL, MOD, NIL, NOT, OF, OR, PACKED, PROCEDURE, RECORD, REPEAT, SET,
THEN, TO, TYPE, UNTIL, VAR, WHILE, WITH, INTEGER, GT, GE, EQ, LE, LT;

non terminal inicio;

inicio ::= PROGRAM IDENTIFIER; codigo
codigo ::= declarações bloco
declarações ::=  constante variavel procedimentos
constante ::= CONST constantes; | vazio
constantes ::= IDENTIFIER = numero,constantes|IDENTIFIER = numero
variavel ::= VAR variaveis;|vazio
variaveis ::= IDENTIFIER,variaveis|IDENTIFIER
procedimentos ::= procedimento;procedimentos|vazio
procedimento ::= PROCEDURE IDENTIFIER parametros declaração bloco
parametros ::= (variaveis)|vazio
bloco ::= BEGIN comandos   END
declaração := constante variavel
comandos ::= comando; comandos | vazio
comando::=  PRINT (lista-arg)|IF exp-relacional THEN comando else | IDENTIFIER ::= exp |WHILE exp-relacional DO bloco
else ::= ELSE comandos
exp::= exp+termo|exp-termo|termo
termo ::= termo * fator | termo / fator |fator
fator ::= (exp) | IDENTIFIER| numero
exp-relacional ::= exp op-relacional exp
op-relacional::= = | <> | < | > | <= |>=






 



