package compiladores.analisadorLexico;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

action code {:

 Hashtable<String, String> type = new Hashtable();
 Hashtable value = new Hashtable();
 
:};



parser code {:



    public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }
    
    public void syntax_error(Symbol s){
    System.out.println("compiler has detected a syntax error at line " + s.left 
        + " column " + s.right + " symbol id: " + s.sym);
	}

:};



terminal PROGRAM, BEGIN, END, PLUS, MINUS, MULT, DIV, ASSIGNMENT, COMMA, DOT,
SEMICOLON, COLON, OPEN_PARENTHESES, CLOSE_PARENTHESES, OPEN_BRACKETS, CLOSE_BRACKETS, OPEN_CURLY_BRACKETS,
CLOSE_CURLY_BRACKETS, CRASIS, AND, ARRAY, CASE, CONST, INTEGER_DIV, DO, DOWNTO, ELSE, FILE, FOR,
FUNCTION, GOTO, IF, IN, LABEL, MOD, NIL, NOT, OF, OR, PACKED, PROCEDURE, RECORD, REPEAT, SET,
THEN, TO, TYPE, UNTIL, VAR, WHILE, WITH, GT, UQ, GE, EQ, LE, LT, TRUE, FALSE, REAL,
STRING_LITERAL;


terminal String IDENTIFIER;
terminal String TYPE_INTEGER;
terminal String BOOLEAN;
terminal String STRING;


terminal INTEGER;

non terminal program, declarations, type_declaration, constant_declaration1, variable_declaration, number, 
procedure_declaration_without_parenthesis, procedure_declaration_with_parenthesis, procedure_arguments, procedure_arguments_aux, 
arguments1, arguments2, procedure_declaration, optional_semicolon, list_of_identifiers, optional_var,
function_declaration_without_parenthesis, function_declaration_with_parenthesis, function_declaration, 
function_arguments, function_declaration_aux, function_local_declarations, expression_declaration,
op_relational_declaration,op_aritimetical_declaration,term_declaration,assignment_declaration, program_block;



/*---------------------------------------------------------- INICIO ----------------------------------------*/


start with program;


program ::= PROGRAM IDENTIFIER SEMICOLON declarations BEGIN program_block END DOT;

declarations ::= declarations constant_declaration1 
				 | 
				 declarations variable_declaration
				 |
				 declarations procedure_declaration BEGIN END SEMICOLON 
				 |
				 declarations function_declaration
				 | 
				 
				 ; 
				 
program_block ::= program_block assignment_declaration 
				  |
				  
				  ;



/*------------------------------------PROCEDURES------------------------------------------------------------------*/	

			
			
				/* PROCEDURES - BASEADO EM: https://www.tutorialspoint.com/pascal/pascal_procedures.htm */
				
procedure_declaration ::=  procedure_declaration_without_parenthesis SEMICOLON
						  |
						   procedure_declaration_with_parenthesis SEMICOLON
						  ;

/*Declaracao de procedures sem parenteses*/
procedure_declaration_without_parenthesis ::= PROCEDURE IDENTIFIER;

/*Declaracao de procedures com parenteses (pode ter nenhum ou varios argumentos) */
procedure_declaration_with_parenthesis ::= PROCEDURE IDENTIFIER OPEN_PARENTHESES procedure_arguments CLOSE_PARENTHESES;


				

/* Argumentos de uma procedure na forma de declarar um argumento ou varios argumentos de uma vez: "declaracao1, declaracao2 : TIPO"  */

procedure_arguments ::= arguments1 | arguments2;

arguments1 ::= optional_var list_of_identifiers SEMICOLON arguments1 
			   | 
			   optional_var list_of_identifiers
			   ;
			   
arguments2 ::= ;
					  
list_of_identifiers ::= IDENTIFIER:id COMMA list_of_identifiers:tipo {:  if(!type.containsKey(id)){
																			type.put(id, (String) tipo);
																			System.out.println(tipo + " (tipo) - (id) " + id ); 
																	 		RESULT = tipo;
																	 }else{
																	 		report_fatal_error("Variavel ja foi declarada: " + id, id);	
																	 } :}
						| 
						IDENTIFIER:id COLON type_declaration:tipo {: if(!type.containsKey(id)){
																			type.put(id, (String) tipo);
																			System.out.println(tipo + " (tipo) - (id) " + id ); 
																	 		RESULT = tipo;
																	 }else{
																	 		report_fatal_error("Variavel ja foi declarada: " + id, id);	
																	 } :};
						
optional_var ::= VAR | ;




/*----------------------------------------------------------------------------------------------*/

							/*CONSTANTES - Not working yet - APARENTEMENTE N PRECISA*/
constant_declaration1 ::= CONST IDENTIFIER EQ number SEMICOLON;





/*--------------------------DECLARACAO DE VARIAVEIS--------------------------------------------------------*/

							
variable_declaration ::= optional_var list_of_identifiers SEMICOLON;


/*---------------------------DECLARACAO DE TIPOS-------------------------------------------------------------*/
type_declaration ::= TYPE_INTEGER {:RESULT = "integer";:}
					 | 
					 BOOLEAN {:RESULT = "boolean";:}
					 | 
					 STRING {:RESULT = "string";:}
					 ;

							/*NUMEROS*/			 
number ::= INTEGER DOT INTEGER 
		   | 
		   INTEGER
		   ;
		   
/*----------------------------------------DECLARACAO DE FUNCOES---------------------------------------------------*/
function_declaration ::= function_declaration_aux function_local_declarations BEGIN END SEMICOLON;

function_declaration_aux ::= function_declaration_without_parenthesis 
						 | 
						 function_declaration_with_parenthesis;

function_declaration_without_parenthesis ::= FUNCTION IDENTIFIER COLON type_declaration SEMICOLON;

function_declaration_with_parenthesis ::= FUNCTION IDENTIFIER OPEN_PARENTHESES function_arguments
CLOSE_PARENTHESES COLON type_declaration SEMICOLON;

								/* (Aproveita producoes de procedures) */
function_arguments ::= arguments1 | arguments2;	

function_local_declarations ::= variable_declaration function_local_declarations | ;							



/*------------------------------------------DECLARACAO DE EXPRESSOES------------------------------------------------*/

expression_declaration ::=  expression_declaration op_relational_declaration term_declaration 
						   |expression_declaration op_aritimetical_declaration term_declaration
						   |term_declaration;
op_relational_declaration ::= EQ | GE | LE | GT | LT | UQ;
op_aritimetical_declaration ::= PLUS | MINUS | MULT | DIV;
term_declaration ::= OPEN_PARENTHESES expression_declaration CLOSE_PARENTHESES 
					 | INTEGER DOT INTEGER
					 | INTEGER
					 | IDENTIFIER 
					 | TRUE | FALSE
					 | STRING_LITERAL;

/*------------------------------------------DECLARACAO DE ATRIBUICAO------------------------------------------------*/

assignment_declaration ::= IDENTIFIER:id ASSIGNMENT expression_declaration SEMICOLON {:
	if(type.get(id) == null){
		report_error("variavel nao foi declarada", id);
	}
	
:};

/*------------------------------------------DECLARACAO DE SETS------------------------------------------------*/




